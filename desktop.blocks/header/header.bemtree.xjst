block header {

    default: {
        return applyNext();
    }

    content: {
        return {
            elem : 'title',
            content : 'welcome' //BEM.I18N('header', 'welcome')
        };
    }

    elem title {

        content, !this.ctx._pause: {
            dump(this, '<- before P request');

            /**
             * XXX: короткий вариант
             * не работает для случая, если нужен errback-вызов
             */
//            doRequestP()
//                .then(this.applyAsync(function(data) {
//                    dump(this, '<- after P request');
//
//                    this.ctx.content = applyCtx({ elem : 'title-wrap', content : 'Hello!' });
//                ))
//                .done();

            var ctx = this.pause();

            doRequestP()
                .then(this.resume.bind(this, ctx, function(data) {
                    dump(this, '<- after P request');

                    this.ctx.content = apply(
                            this._smsResults = data,
                            this._mode = '',
                            this.ctx = {
                                elem : 'title-wrap',
                                content : 'Hello!'
                            });
                }))
                .fail(this.resume.bind(this, ctx, function(err) {
                    dump(this, '<- after P request fail!');

                    apply();
                }))
                .done();

        }

    }

    elem title-wrap, content {

        this.ctx.data: [
            {
                block : 'results',
                content : this.ctx.data
            },
            this.ctx.content
        ]

        this._smsResults: {
            return applyNext(this.ctx.data = this._smsResults);
        }

    }

}


function doRequestP() {
    var body = '',
        defer = Vow.promise();

    log('>>> do request');

    var req = require('https').request('https://smsimple.ru/metro/get_results.php', function(res) {
        res.on('data', function(data) {
            body += data;
        });

        res.on('end', function() {
            log('request end');

            setTimeout(function() {
                // XXX: ручка отдает невалидный JSON — фиксим ;)
                defer.fulfill(JSON.parse(body.slice(1, -1)));
            }, 500);
        });

        res.on('error', function(err) {
            defer.reject(err);
        });
    });

    req.end();

    return defer;
}
