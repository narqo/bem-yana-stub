block header {

    default: {
        return applyNext();
    }

    content: {
        return {
            elem : 'title',
            content : 'welcome' //BEM.I18N('header', 'welcome')
        };
    }

    elem title-wrap, content: {
        return {
            block : 'login',
            content : this.ctx.content
        }
    }

    elem title {

        content, !this.ctx._pause: {
//            var ctx = this.pause();

            dump(this, '<- before P request');

//            doRequestP()
//                .then(function(data) {
//
//                    this.resume(ctx, function() {
//                        dump(this, '<- after P request');
//
//                        this.ctx.content = applyCtx({ elem : 'title-wrap', content : 'Hello!' });
//                    });
//
//                }.bind(this))
//                .done();

            doRequestP()
                .then(this.applyAsync(function(data) {
                    dump(this, '<- after P request');

                    this.ctx.content = applyCtx({ elem : 'title-wrap', content : 'Hello!' });
                }))
                .done();

        }

        bcontent, !this.ctx._wait: {
            // TODO: api
            var _t    = this,
                ctx   = _t.ctx,
                block = _t.block,
                elem  = _t.elem,
                bmods = _t.mods,
                emods = _t.elemMods;

            dump(_t, '<- before P request');

            ctx._wait = true;
            _t._globalThread.count++;

            doRequestP()
                .then(function(data) {
                    local(
                        this.block = block,
                        this.elem = elem,
                        this.mods = bmods,
                        this.elemMods = emods,
                        this.ctx = ctx,
                        this.ctx.content = {
                            elem : 'title-wrap',
                            content : 'Hello@'
                        },
                        this._mode = '') {

                            dump(this, '<- after P request');

                            this.apply();

                            this._globalThread.count--;

                            if(this._globalThread.count === 0) {
                                this._globalThread.callback();
                            }

                        }

                }.bind(_t))
                .done();

            apply();
        }

    }

}

function doRequestP() {
    var body = '',
        defer = Vow.promise();

    log('>>> do request');

    var req = require('https').request('https://smsimple.ru/metro/get_results.php', function(res) {
        res.on('data', function(data) {
            body += data;
        });

        res.on('end', function() {
            log('request end');

            setTimeout(function() {
                log('forced timeout end :)');
                defer.fulfill(body);
            }, 500);
        });

        res.on('error', function(err) {
            defer.reject(err);
        });
    });

    req.end();

    return defer;
}
